#ifndef _SUDOKU_H_
#define _SUDOKU_H_

#include <stdlib.h>
#include <time.h>

/*
POSITION：
----------------------------------
| 00 01 02 | 03 04 05 | 06 07 08 |
| 10 11 12 | 13 14 15 | 16 17 18 |
| 20 21 22 | 23 24 25 | 26 27 28 |
|--------------------------------|
| 30 31 32 | 33 34 35 | 36 37 38 |
| 40 41 42 | 43 44 45 | 46 47 48 |
| 50 51 52 | 53 54 55 | 56 57 58 |
|--------------------------------|
| 60 61 62 | 63 64 65 | 66 67 68 |
| 70 71 72 | 73 74 75 | 76 77 78 |
| 80 81 82 | 83 84 85 | 86 87 88 |
----------------------------------
*/
/*
基本思路：先填充所有的1，再填充所有的2，以此类推，一直到9，如果冲突则回溯。
实现思路：划分成9个九宫格，先随机生成每个九宫格中1-9的位置，然后一次填入，如果冲突，回溯后将下一个位置和当前位置交换，继续填充。
*/

//九宫格行、列大小
//通过修改这个可以控制数度地图的大小，推荐在2、3、4,5或5以上不推荐，因为生成时间很长超过
#define RC_SQUARE 3

//总行、列大小
#define RC_COUNT  (RC_SQUARE * RC_SQUARE)

//数独创建对象
class Sudoku
{
private:
    //存储生成的随机位置，以九宫格个为单位，一维数组表示第几个九宫格，二维数组表示这个九宫格中的第几个
    signed char m_randPos[RC_COUNT][RC_COUNT];
    //实际使用的地图
    signed char m_useMap[RC_COUNT][RC_COUNT];
    //隐藏的数字数量
    short m_hideCount;
    //填充过的数字数量（方便判断是否全部填完）
    short m_fillCount;
private:
    /************************************************************************
    * 功能 : 实际创建数独地图的递归函数。
    * 参数 :
    *        num   -> 当前填充的数字(从1开始)。
    *        count -> 当前填充到第几个九宫格(从1开始)。
    * 返回 : 递归创建成功返回true，否则返回false。
    ************************************************************************/
    bool Create(int num, int count);
    
public:
    /************************************************************************
    * 功能 : 默认构造。
    * 参数 : 无。
    * 返回 : 无。
    ************************************************************************/
    Sudoku();

    /************************************************************************
    * 功能 : 创建数独游戏地图。
    * 参数 :
    *        hideCount -> 为了游戏去掉的数字数量。
    * 返回 : 创建成功返回true，否则返回false。
    * 备注 : 如果去掉的数字数量小于0或者大于最大值(81)，则失败。
    ************************************************************************/
    bool Create(short hideCount);

    /************************************************************************
    * 功能 : 重置数独。
    * 参数 : 无。
    * 返回 : 无。
    ************************************************************************/
    void Reset();

    /************************************************************************
    * 功能 : 判断当指定位置数字是否有重复的存在。
    * 参数 :
    *        row    -> 数字所在行。
    *        col    -> 数字所在列。
    *        tryNum -> 尝试填充的数字，
    *                  默认[0]。
    * 返回 : 数独规则下已经存在相同数字返回true，否则返回false。
    * 备注 : 1.tryNum如果为0(默认值)，则判断指定位置的数字是否已经重复，如果
    *        不为0，则使用此数字充当当指定置数字判断是否已经重复。
    *        2.如果位置索引小于0或者大于最大值(9),则统一返回true。
    ************************************************************************/
    bool Isrepeated(int row, int col, int tryNum = 0);
    /************************************************************************
    * 功能 : 判断指定位置的数字是否是系统生成的不可修改的数字。
    * 参数 :
    *        row -> 数字所在行。
    *        col -> 数字所在列。
    * 返回 : 是固定数字返回true，否则返回false。
    * 备注 : 如果位置索引小于0或者大于最大值(9),则统一返回true。
    ************************************************************************/
    bool IsFixedNumber(int row, int col);

    /************************************************************************
    * 功能 : 获取指定位置的数字。
    * 参数 :
    *        row -> 数字所在行。
    *        col -> 数字所在列。
    * 返回 : 指定位置的数字。
    * 备注 : 如果位置索引小于0或者大于最大值(9),则统一返回0。
    ************************************************************************/
    int GetNumber(int row, int col);
    /************************************************************************
    * 功能 : 设置数字到指定位置。
    * 参数 :
    *        row -> 数字所在行。
    *        col -> 数字所在列。
    *        num -> 设定的数字。
    * 返回 : 设置成功返回true，否则返回false。
    * 备注 : 如果位置索引和数字，小于0或者大于最大值(9),则统一返回false。
    ************************************************************************/
    bool SetNumber(int row, int col, int num);
    
    /************************************************************************
    * 功能 : 判断是否全部正确完成。
    * 参数 : 无。
    * 返回 : 全部正确完成返回true，否则返回false。
    ************************************************************************/
    bool IsFinished();
};

#endif // _SUDOKU_H_